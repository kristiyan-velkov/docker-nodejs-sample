name: Production Deployment

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "production"
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy:
    name: Deploy to ${{ github.event.inputs.environment || 'production' }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'production' }}
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.28.0"

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          kubectl config current-context

      - name: Update image tag in Kubernetes manifest
        run: |
          TAG=${{ github.event.release.tag_name || github.sha }}
          sed -i "s|ghcr.io/your-username/docker-nodejs-sample:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${TAG}|g" nodejs-sample-kubernetes.yaml

      - name: Deploy to Kubernetes
        run: |
          export KUBECONFIG=kubeconfig
          kubectl apply -f nodejs-sample-kubernetes.yaml
          kubectl rollout status deployment/todoapp-deployment -n todoapp --timeout=300s

      - name: Verify deployment
        run: |
          export KUBECONFIG=kubeconfig
          kubectl get pods -n todoapp
          kubectl get services -n todoapp
          kubectl get ingress -n todoapp

      - name: Run smoke tests
        run: |
          # Wait for deployment to be ready
          sleep 30

          # Get the service URL (adjust based on your setup)
          SERVICE_URL="https://yourdomain.com"

          # Basic health check
          curl -f "$SERVICE_URL/health" || exit 1

          echo "Deployment successful and health check passed!"

      - name: Cleanup
        if: always()
        run: |
          rm -f kubeconfig
